name: OpenWrt_Build_x64_test(编译官方源码)

on:
#  schedule:
#    - cron: 5 6 * * 0
  workflow_dispatch:
  watch:
    types: started

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  PUSH_PLUS_TOKEN: ${{ secrets.PUSH_PLUS_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 编译环境CPU型号检测
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
    - name: 构建空间最大化的编译环境
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 512
        root-reserve-mb: 4608
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
    - name: 准备结束
      uses: actions/checkout@main
    - name: 开始部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo /bin/bash -c "$(curl -sL https://git.io/vokNn)"
        sudo -E apt-fast -y -qq install asciidoc bash bcc bin86 binutils bison bzip2 clang-15 llvm-15 file flex g++ g++-multilib gawk gcc gcc-multilib gettext git gzip help2man intltool libboost-dev libelf-dev libncurses-dev libncurses5-dev libssl-dev libthread-queue-any-perl libusb-dev libxml-parser-perl make patch perl-modules python3-dev python3-pip python3-pyelftools python3-setuptools rsync sharutils swig time unzip util-linux wget xsltproc zlib1g-dev zip
        sudo -E apt-fast -y -qq install dos2unix dwarves quilt
        pip3 install --user -U pylibfdt --break-system-packages
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        sudo -E git config --global core.abbrev auto
        df -h
    - name: 下载OpenWrt_Build_x64_test编译源码
      run: |
        sudo chown -R runner:runner /home/runner/work/OpenWrt_Build_x64_test
        cp -r ./SCRIPTS/X86/. ./SCRIPTS/
        cp -r ./SCRIPTS/. ./
        /bin/bash 01_get_ready.sh
    - name: 编译预处理
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        cp -r ../SCRIPTS/. ./
        /bin/bash 02_prepare_package.sh
        /bin/bash 02_target_only.sh
        /bin/bash 04_remove_upx.sh
    - name: 下载.config配置文件
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        cp -rf ../SEED/X86/x64_test.config .config
    - name: 更新插件源
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        /bin/bash 03_convert_translation.sh
    - name: 添加ACL
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        /bin/bash 05_create_acl_for_luci.sh -a
    - name: 权限修复
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        sudo -E chmod -R 755 ./08_fix_permissions.sh
        /bin/bash 08_fix_permissions.sh
    - name: 生成.config配置
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        make defconfig
    - name: 获取架构
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        TARGET_DEVICE_ARCH="$(grep "^CONFIG_TARGET_.*_.*=y$" ".config" | head -n 1 | sed 's/^CONFIG_TARGET_//g' | awk -F '_' '{print $1}')"
        echo "TARGET_DEVICE_ARCH=${TARGET_DEVICE_ARCH}" >>$GITHUB_ENV
        #latest_release="$(curl -s https://github.com/openwrt/openwrt/tags | grep -Eo "v[0-9\.]+\-*r*c*[0-9]*.tar.gz" | sed -n '/[2-9][3-9]/p' | sed -n 1p | sed 's/.tar.gz//g' | sed 's/v//g')"
        latest_release="v23.05.4"
        echo "latest_release=${latest_release}" >>$GITHUB_ENV
    - name: 缓存加速
      uses: HiGarfield/cachewrtbuild@main
      with:
        mixkey: ${{ env.TARGET_DEVICE_ARCH }}
        prefix: ${{ github.workspace }}/openwrt
    - name: 下载软件包
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        make download -j50
    - name: 开始编译固件
      working-directory: ${{ github.workspace }}/openwrt
      id: compileopenwrt
      continue-on-error: true
      run: |
        #echo | make kernel_oldconfig -j$(($(nproc) + 1)) 
        IGNORE_ERRORS=1 make -j$(($(nproc) + 1))
        echo $?
    - name: 检查编译过程的错误
      working-directory: ${{ github.workspace }}/openwrt
      if: steps.compileopenwrt.outcome == 'failure'
      run: |
        cat ./.config
        echo '================================================================'
        make -j1 V=s
    - name: 整理固件文件夹
      id: organize
      run: |
        rm -rf ./artifact/
        mkdir -p ./artifact/
        mv openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img.gz ./artifact/
        mv openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img.gz ./artifact/
        cd ./artifact/
        ls -Ahl
        gzip -d *.gz && exit 0
        gzip --best *.img
        ls -Ahl
        zip OpenWrt-x64_测试版-$(date +%Y%m%d%H%M).zip *combined.img.gz
        zip OpenWrt-x64_测试版-$(date +%Y%m%d%H%M)-efi.zip *combined-efi.img.gz
        rm -rf openwrt-x86-64-generic-squashfs-combined.img.gz
        rm -rf openwrt-x86-64-generic-squashfs-combined-efi.img.gz
        ls -Ahl
    - name: 上传固件在 github Artifacts
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_x64_test
        path: ./artifact/
    - name: 发布固件
      id: create_release
      uses: ncipollo/release-action@main
      with:
        name: OpenWrt_x64_test
        tag: OpenWrt_x64_test
        token: ${{ secrets.REPO_TOKEN }}
        allowUpdates: true
        body: 编译完成时间：$(date +%Y%m%d%H%M)
        artifacts: ./artifact/*.zip
    - name: 检查磁盘空间
      run: df -h
    - name: Telegram或pushplus信息通知
      run: |
        curl -k --data token="${{ secrets.PUSH_PLUS_TOKEN }}" --data title="【${{env.WAREHOUSE_MAN}}】编译成功" --data "content=我亲爱的✨主人✨：您使用【${{matrix.target}}】文件夹编译【${REPO_BRANCH}分支的${{env.TARGET_PROFILE}}】固件顺利编译完成了✌️💯💐(${{env.WAREHOUSE_MAN}}仓库的#${{env.RUN_NUMBER}}号)！($(date +%Y%m%d%H%M))" "http://www.pushplus.plus/send"
